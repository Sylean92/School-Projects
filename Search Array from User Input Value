########################################################################
# Alyssa Cooke
# COMPSCI 271 Lab 6
# April 6-7, 2015
########################################################################
# Main program description:
# Search a predefined array of numbers for a specific value that is
# requested by the user.
#
# Arguments: None.
#
# Returns: Nothing.
########################################################################

        .data
X:      .byte   1, 27, 92, 46, 72, 8, 13, 93, 65, 112 #takes one byte so move 1 byte instead of 4
N:      .word   10 #stack length
endl:   .asciiz "\n"

        # Fill in additional .asciiz directives for I/O messages here
input:	.asciiz "Enter number to search for: "
found:  .asciiz "The number was found"
not_found:  .asciiz "The number was not found"
        .text
main:
        li   $s5, -1
		li	 $s6, 1
		
		
		# 1. Load address of X into a register (e.g., $s0)
		la		$s0, X
		# 2. Load value of N into a register (e.g., $s1)
		lw		$s1, N
		
		# 3. Prompt user to enter a number to search for, then:
		# 4. Get the number to find from the keyboard
		li  $v0, 4 				#display string
		la	$a0, input   			#display input string
		syscall
		li      $v0, 5				# system call code for Read Integer
		syscall
		move    $s3, $v0  

		# 5. Prepare the stack frame.
		#    * How many input parameters do you need to store? NEED 4
		#    * How many values are being returned?  1
		#    * Do you want to store the return address? yes
		#    Use answers to these questions to make the stack frame. 
		addi  $sp, $sp, -16 #each parameters equal 4... stack: X_ N_ L_ V_
		sw	  $s0, 0($sp)  #Store X address into 0(stack 1)
		sw	  $s1, 4($sp)  # N
		sw	  $s3, 8($sp)  # Search value
		
        # 6. Call the Search function
		
		jal		search
		
		# 7. Copy returned value from the Search function into a 
		#    register, then deallocate the stack frame's space
		
		lw   $s4, 12($sp)  #store returned value
		addi  $sp, $sp, 16  #de-allocate stack space
		
		# 8. If number was found in element N, display:
		#    "This number is in element N"
		#    Otherwise: "This number is not in the array" 
		bltz $s4, else4   				#if function call's value $s4 = -1
			li  $v0, 4 					#display string
			la	$a0, found   			#display input string			
		syscall
		b finish
		
		else4:
			li  $v0, 4 				#display string
			la	$a0, not_found   			#display input string
		syscall		
        
		# 9. Return control to the operating system		
		finish: li      $v0, 10
        syscall

########################################################################
# Description:
# Sequentially (linearly) search the given array for the relative
# location (index) of a given value. If the value is found, the array
# index (between 0 and N-1) of the value is returned. Otherwise, this
# function returns -1.
#
# Arguments:
# 0($sp): starting address of array
# 4($sp): number of array elements
# 8($sp): value to search for
#
# Returns:
# ?($sp): index of element where value is found, or -1 if not found
########################################################################
        .text	
search:	

	lw		$t6, 0($sp)  #get start address of X
	lw		$t4, 4($sp)  # get N (size)
	lw		$t5, 8($sp)  # word to search with
	li      $t7, 0   #counter
	
while: 
	blt, $t7, $t4, else   	#if counter is greater or equal to N return -1
	li $t7, -1    			#makes -1
	sw	$t7, 12($sp)
	jr		$ra   			#returns -1
	
	else:					#if $t5(word) does not
	lb   $t8, 0($t6)
	bne $t8, $t5, else2		#if array value equals word searched return 1
	sw	$t7, 12($sp)
	jr   $ra				#return 1
	
		else2:
		addi $t6, $t6, 1    #increment array by 1 each time
		addi $t7, $t7, 1    #increment counter by 1
		b while			    #go back through while loop
		
# (&X(address), N(length of stack), V(value), L(number ranging from 1 to N))

# int search(int[] X, int N, int V){
#	int i =0;
#	do {
#		if (X[i] ==V) {return i};
#		i++;
#} while (i<N);
#   return -1;
#}
